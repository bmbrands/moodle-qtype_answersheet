{"version":3,"file":"questions.min.js","sources":["../../src/local/questions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module questions\n *\n * @module     qtype_answersheet/local/questions\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Questions class\n */\nclass Questions {\n\n    /**\n     * The questionid.\n     * @type {Number}\n     */\n    questionid;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} questionid The questionid.\n     * @return {void}\n     */\n    constructor(element, questionid) {\n        this.element = element;\n        this.questionid = parseInt(questionid);\n        this.addEventListeners();\n        this.setLetterInputValues();\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        this.element.addEventListener('input', (e) => {\n            const input = e.target.closest('[data-region=\"letterinput\"]');\n            if (input) {\n                this.letterInputAction(input);\n            }\n            // On backspace, focus the previous input\n            if (e.inputType === 'deleteContentBackward') {\n                const index = parseInt(input.dataset.index);\n                const previousInput =\n                    input.closest('[data-region=\"letterbyletterquestion\"]').querySelector(`[data-index=\"${index - 1}\"]`);\n                if (previousInput) {\n                    previousInput.focus();\n                }\n            }\n        });\n    }\n\n    /**\n     * Letter input action.\n     * @param {HTMLElement} input The input.\n     * @return {void}\n     */\n    letterInputAction(input) {\n        const value = input.value;\n        const index = parseInt(input.dataset.index);\n        const nextInput =\n            input.closest('[data-region=\"letterbyletterquestion\"]').querySelector(`[data-index=\"${parseInt(index) + 1}\"]`);\n        if (value.length > 1) {\n            input.value = value.charAt(0);\n            if (nextInput) {\n                nextInput.focus();\n                nextInput.value = value.charAt(1);\n            }\n        }\n        this.setHiddenInputValue(input);\n    }\n\n    /**\n     * Set hidden input value.\n     * @param {HTMLElement} input The input.\n     * @return {void}\n     */\n    setHiddenInputValue(input) {\n        const row = input.closest('[data-region=\"letterbyletterquestion\"]');\n        const hiddenInput = row.querySelector('input[data-region=\"hiddeninput\"]');\n        // Construct the hidden input value from all letter by letter inputs in the row\n        const inputs = row.querySelectorAll('[data-region=\"letterinput\"]');\n        let value = '';\n        for (let i = 0; i < inputs.length; i++) {\n            value += inputs[i].value;\n        }\n        hiddenInput.value = value;\n    }\n\n    /**\n     * Set the letter input values.\n     * @return {void}\n     */\n    setLetterInputValues() {\n        const rows = this.element.querySelectorAll('[data-region=\"letterbyletterquestion\"]');\n        for (let i = 0; i < rows.length; i++) {\n            const hiddenInput = rows[i].querySelector('input[data-region=\"hiddeninput\"]');\n            const value = hiddenInput.value;\n            const inputs = rows[i].querySelectorAll('[data-region=\"letterinput\"]');\n            for (let j = 0; j < inputs.length; j++) {\n                inputs[j].value = value.charAt(j);\n            }\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} questionid The questionid.\n */\nconst init = (element, questionid) => {\n    new Questions(element, questionid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Questions","constructor","element","questionid","parseInt","addEventListeners","setLetterInputValues","addEventListener","e","input","target","closest","letterInputAction","inputType","index","dataset","previousInput","querySelector","focus","value","nextInput","length","charAt","setHiddenInputValue","row","hiddenInput","inputs","querySelectorAll","i","rows","this","j","init"],"mappings":";;;;;;;2FA0BMA,UAoBFC,YAAYC,QAASC,kGACZD,QAAUA,aACVC,WAAaC,SAASD,iBACtBE,yBACAC,uBAOTD,yBACSH,QAAQK,iBAAiB,SAAUC,UAC9BC,MAAQD,EAAEE,OAAOC,QAAQ,kCAC3BF,YACKG,kBAAkBH,OAGP,0BAAhBD,EAAEK,UAAuC,OACnCC,MAAQV,SAASK,MAAMM,QAAQD,OAC/BE,cACFP,MAAME,QAAQ,0CAA0CM,qCAA8BH,MAAQ,SAC9FE,eACAA,cAAcE,YAW9BN,kBAAkBH,aACRU,MAAQV,MAAMU,MACdL,MAAQV,SAASK,MAAMM,QAAQD,OAC/BM,UACFX,MAAME,QAAQ,0CAA0CM,qCAA8Bb,SAASU,OAAS,SACxGK,MAAME,OAAS,IACfZ,MAAMU,MAAQA,MAAMG,OAAO,GACvBF,YACAA,UAAUF,QACVE,UAAUD,MAAQA,MAAMG,OAAO,UAGlCC,oBAAoBd,OAQ7Bc,oBAAoBd,aACVe,IAAMf,MAAME,QAAQ,0CACpBc,YAAcD,IAAIP,cAAc,oCAEhCS,OAASF,IAAIG,iBAAiB,mCAChCR,MAAQ,OACP,IAAIS,EAAI,EAAGA,EAAIF,OAAOL,OAAQO,IAC/BT,OAASO,OAAOE,GAAGT,MAEvBM,YAAYN,MAAQA,MAOxBb,6BACUuB,KAAOC,KAAK5B,QAAQyB,iBAAiB,8CACtC,IAAIC,EAAI,EAAGA,EAAIC,KAAKR,OAAQO,IAAK,OAE5BT,MADcU,KAAKD,GAAGX,cAAc,oCAChBE,MACpBO,OAASG,KAAKD,GAAGD,iBAAiB,mCACnC,IAAII,EAAI,EAAGA,EAAIL,OAAOL,OAAQU,IAC/BL,OAAOK,GAAGZ,MAAQA,MAAMG,OAAOS,kBAehC,CACXC,KALS,CAAC9B,QAASC,kBACfH,UAAUE,QAASC"}