{"version":3,"file":"manager.min.js","sources":["../../src/local/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     qtype_answersheet/local/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'qtype_answersheet/local/state';\nimport Repository from 'qtype_answersheet/local/repository';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport './components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The questionid.\n     * @type {Number}\n     */\n    questionid;\n\n    /**\n     * The temp row id.\n     * @type {Number}\n     */\n    temprowid = 2;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * The table name.\n     */\n    table = 'qtype_answersheet';\n\n    /**\n     * The table columns.\n     * @type {Array}\n     */\n    columns = [];\n\n    /**\n     * Types definition\n     */\n    TYPES = {\n        '1': 'radiochecked',\n        '2': 'letterbyletter',\n        '3': 'freetext'\n    };\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} questionid The questionid.\n     * @return {void}\n     */\n    constructor(element, questionid) {\n        this.element = element;\n        this.questionid = parseInt(questionid);\n        this.addEventListeners();\n        this.getDatagrid();\n        this.tempfield = document.querySelector('input[name=\"newquestion\"]');\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const form = document.querySelector('[data-region=\"app\"]');\n        form.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        form.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n            const modulename = e.target.closest('[data-region=\"modulename\"]');\n            if (modulename) {\n                this.changeModule(modulename);\n            }\n            const moduletype = e.target.closest('[data-region=\"moduletype\"]');\n            if (moduletype) {\n                this.changeModule(moduletype);\n            }\n            this.setTableData();\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        form.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n                e.preventDefault();\n            }\n            if (e.key === 'Enter') {\n                e.preventDefault();\n            }\n        });\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n        });\n    }\n\n    async getDatagrid() {\n        await this.getTableData();\n        await this.getTableConfig();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        const response = await Repository.getColumns({table: this.table});\n        await State.setValue('columns', response.columns);\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({questionid: this.questionid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            const modules = await this.parseModules(response.modules);\n            State.setValue('modules', modules);\n            this.setTableData();\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the modules, add the correct column properties to each cell.\n     * @param {Array} modules The modules.\n     * @return {Array} The parsed rows.\n     */\n    async parseModules(modules) {\n        modules.forEach(async(mod) => {\n            const type = this.TYPES[mod.type];\n            mod[type] = true;\n            mod.indicator = await this.getIndicator(mod.numoptions, mod.type);\n            mod.rows.map(row => {\n                row.cells = row.cells.map(cell => {\n                    const column = mod.columns.find(column => column.column == cell.column);\n                    // Clone the column properties to the cell but keep the cell properties.\n                    cell = Object.assign({}, cell, column);\n                    if (cell.type === 'select') {\n                        // Clone the options array to avoid shared references\n                        cell.options = cell.options.map(option => {\n                            const clonedOption = Object.assign({}, option);\n                            if (clonedOption.name == cell.value) {\n                                clonedOption.selected = true;\n                            }\n                            return clonedOption;\n                        });\n                    }\n                    cell.edit = true;\n                    return cell;\n                });\n                return row;\n            });\n        });\n        return modules;\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n            },\n        };\n    }\n\n    /**\n     * Check the cell value. It can not exceed the cell length.\n     * @param {object} cell The cell.\n     * @return {void}\n     */\n    checkCellValue(cell) {\n        if (cell.value === null) {\n            return;\n        }\n        if (cell.type === 'text' && cell.value.length > cell.length) {\n            cell.value = cell.value.substring(0, cell.length);\n        }\n    }\n\n\n    /**\n     * Clean the Modules array.\n     * @param {Array} modules The modules.\n     * @return {Array} The cleaned modules.\n     */\n    cleanModules(modules) {\n        const cleanedModules = [];\n        modules.forEach(module => {\n            const rows = module.rows;\n            const rowObject = this.getRowObject();\n            const cleanedRows = rows.map(row => {\n                const cleanedRow = {};\n                Object.keys(rowObject.rows).forEach(key => {\n                    cleanedRow[key] = row[key];\n                });\n                // Clean the cells.\n                cleanedRow.cells = row.cells.map(cell => {\n                    const cleanedCell = {};\n                    this.checkCellValue(cell);\n                    Object.keys(rowObject.rows.cells).forEach(key => {\n                        cleanedCell[key] = cell[key];\n                    });\n                    return cleanedCell;\n                });\n                return cleanedRow;\n            });\n            const cleanedModule = {};\n            cleanedModule.id = module.moduleid;\n            cleanedModule.sortorder = module.modulesortorder;\n            cleanedModule.name = module.modulename;\n            cleanedModule.type = module.type;\n            cleanedModule.numoptions = module.numoptions;\n            cleanedModule.rows = cleanedRows;\n            cleanedModules.push(cleanedModule);\n        });\n        return cleanedModules;\n    }\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const modules = State.getValue('modules');\n        const cleanedModules = this.cleanModules(modules);\n        this.tempfield.value = JSON.stringify(cleanedModules);\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'addrow') {\n            this.addRow(btn);\n        }\n        if (btn.dataset.action === 'deleterow') {\n            this.deleteRow(btn);\n        }\n        if (btn.dataset.action === 'addmodule') {\n            this.addModule(btn);\n        }\n        if (btn.dataset.action === 'deletemodule') {\n            this.deleteModule(btn);\n        }\n        if (btn.dataset.action === 'moduleremoveoption') {\n            this.updateModuleOption(btn, false);\n        }\n        if (btn.dataset.action === 'moduleaddoption') {\n            this.updateModuleOption(btn, true);\n        }\n        this.setTableData();\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async addRow(btn) {\n        const modules = State.getValue('modules');\n\n        let rowid = btn.dataset.id;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const rows = module.rows;\n        // When called from the link under the table, the rowid is not set.\n        if (rowid == -1) {\n            rowid = rows[rows.length - 1].id;\n        }\n\n        const row = await this.createRow(moduleid, rows.length + 1);\n        if (!row) {\n            return;\n        }\n        // Inject the row after the clicked row.\n        rows.splice(rows.indexOf(rows.find(r => r.id == rowid)) + 1, 0, row);\n        State.setValue('modules', modules);\n        this.resetRowSortorder();\n    }\n\n    /**\n     * Create a new row.\n     *\n     * @param {int} moduleid The moduleid.\n     * @param {int} sortorder The sortorder.\n     * @return {Promise} The promise.\n     */\n    async createRow(moduleid, sortorder) {\n        let rowid = this.temprowid++;\n\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            row.moduleid = moduleid;\n            row.numoptions = 4;\n            row.sortorder = sortorder;\n            row.type = 1;\n            row.radiochecked = true;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async deleteRow(btn) {\n        const modules = State.getValue('modules');\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const index = module.rows.findIndex(r => r.id == rowid);\n        module.rows.splice(index, 1);\n        this.resetRowSortorder();\n        State.setValue('modules', modules);\n        return new Promise((resolve) => {\n            resolve(rowid);\n        });\n\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            // Find the correct cell in the row.\n            const rowIndex = module.rows.findIndex(r => r.id == index);\n            if (rowIndex === -1) {\n                return;\n            }\n            const cellIndex = module.rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n            module.rows[rowIndex].cells[cellIndex].value = value;\n            if (module.rows[rowIndex].cells[cellIndex].type === 'select') {\n                module.rows[rowIndex].cells[cellIndex].options.forEach(option => {\n                    option.selected = option.name === value;\n                });\n            }\n        });\n    }\n\n    /**\n     * Change the module name.\n     * @param {object} element The element that was changed.\n     * @return {void}\n     */\n    changeModule(element) {\n        const moduleElement = element.closest('[data-region=\"module\"]');\n        const moduleid = moduleElement.dataset.id;\n        const name = moduleElement.querySelector('[data-region=\"modulename\"]').value;\n        const type = moduleElement.querySelector('[data-region=\"moduletype\"]').value;\n        const numoptions = moduleElement.querySelector('[data-region=\"numoptions\"]').value;\n        Object.values(this.TYPES).forEach(type => {\n            moduleElement.classList.remove(type);\n        });\n        moduleElement.classList.add(this.TYPES[type]);\n        const modules = State.getValue('modules');\n        modules.forEach(moduleObject => {\n            if (moduleObject.moduleid == moduleid) {\n                moduleObject.modulename = name;\n                moduleObject.type = parseInt(type);\n                moduleObject.class = this.TYPES[type];\n                moduleObject.numoptions = parseInt(numoptions);\n                Object.values(this.TYPES).forEach(type => {\n                    moduleObject[type] = false;\n                });\n                moduleObject[this.TYPES[type]] = true;\n            }\n        });\n        this.updateRangeIndicator(moduleElement);\n    }\n\n    /**\n     * Update the module option. Update the value of the numoptions field.\n     * @param {object} btn The button that was clicked.\n     * @param {Boolean} add Add or remove an option.\n     * @return {void}\n     */\n    updateModuleOption(btn, add) {\n        const module = btn.closest('[data-region=\"module\"]');\n        const numoptions = module.querySelector('[data-region=\"numoptions\"]');\n        const value = parseInt(numoptions.value);\n        if (add) {\n            numoptions.value = value + 1;\n        } else {\n            numoptions.value = value - 1;\n        }\n        this.changeModule(numoptions);\n    }\n\n    /**\n     * Update the range indicator.\n     * @param {HTMLElement} moduleElement The module.\n     */\n    async updateRangeIndicator(moduleElement) {\n        const type = moduleElement.querySelector('[data-region=\"moduletype\"]').value;\n        const numoptions = moduleElement.querySelector('[data-region=\"numoptions\"]').value;\n        const indicator = moduleElement.querySelector('[data-region=\"indicator\"]');\n        indicator.textContent = await this.getIndicator(numoptions, type);\n    }\n\n    /**\n     * Get the indicator string\n     * @param {int} numoptions The number of options.\n     * @param {int} type The type.\n     * @return {string} The indicator string.\n     */\n    async getIndicator(numoptions, type) {\n        const stringname = 'indicator:' + this.TYPES[type];\n        const stringtemplate = {\n            'options': numoptions,\n            'lastletter': String.fromCharCode(65 + parseInt(numoptions) - 1),\n        };\n        return await getString(stringname, 'qtype_answersheet', stringtemplate);\n    }\n\n    /**\n     * Delete a module.\n     * @param {object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     * @return {void}\n     */\n    async deleteModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        return new Promise((resolve) => {\n            const index = modules.indexOf(module);\n            modules.splice(index, 1);\n            State.setValue('modules', modules);\n            resolve(moduleid);\n        });\n    }\n\n    /**\n     * Add a new module.\n     * @return {int} The moduleid.\n     */\n    async addModule() {\n        const modules = State.getValue('modules');\n        const index = modules.length;\n        const numoptions = 4;\n        let moduleid = modules.length + 1;\n        const row = await this.createRow(moduleid, 1);\n        const module = {\n            moduleid: moduleid,\n            modulesortorder: index + 1,\n            modulename: ' ',\n            type: 1,\n            numoptions: numoptions,\n            indicator: this.getIndicator(numoptions, 1),\n            rows: [row],\n        };\n        module[this.TYPES['1']] = true;\n        modules.push(module);\n        State.setValue('modules', modules);\n        return moduleid;\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            module.rows.forEach((row, index) => {\n                row.sortorder = index + 1;\n            });\n        });\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} questionid The questionid.\n */\nconst init = (element, questionid) => {\n    new Manager(element, questionid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","element","questionid","parseInt","addEventListeners","getDatagrid","tempfield","document","querySelector","form","addEventListener","e","btn","target","closest","preventDefault","actions","input","change","modulename","changeModule","moduletype","setTableData","key","navigate","this","getTableData","getTableConfig","response","Repository","getColumns","table","State","setValue","columns","getData","modules","parseModules","error","exception","forEach","async","type","TYPES","mod","indicator","getIndicator","numoptions","rows","map","row","cells","cell","column","find","Object","assign","options","option","clonedOption","name","value","selected","edit","getRowObject","checkCellValue","length","substring","cleanModules","cleanedModules","module","rowObject","cleanedRows","cleanedRow","keys","cleanedCell","cleanedModule","id","moduleid","sortorder","modulesortorder","push","getValue","JSON","stringify","dataset","action","addRow","deleteRow","addModule","deleteModule","updateModuleOption","rowid","m","createRow","splice","indexOf","r","resetRowSortorder","temprowid","Promise","resolve","radiochecked","undefined","structuredClone","index","findIndex","columnid","rowIndex","cellIndex","c","moduleElement","values","classList","remove","add","moduleObject","class","updateRangeIndicator","textContent","stringname","stringtemplate","String","fromCharCode","currentIndex","currentColumn","allRows","querySelectorAll","i","nextInput","focus","previousInput","nextColumn","nextElementSibling","previousColumn","previousElementSibling","init"],"mappings":"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"}