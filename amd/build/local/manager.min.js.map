{"version":3,"file":"manager.min.js","sources":["../../src/local/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     qtype_answersheet/local/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'qtype_answersheet/local/state';\nimport Repository from 'qtype_answersheet/local/repository';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {debounce} from 'core/utils';\nimport './components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The questionid.\n     * @type {Number}\n     */\n    questionid;\n\n    /**\n     * The temp row id.\n     * @type {Number}\n     */\n    temprowid = 2;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * The table name.\n     */\n    table = 'qtype_answersheet';\n\n    /**\n     * The table columns.\n     * @type {Array}\n     */\n    columns = [];\n\n    /**\n     * Types definition\n     */\n    TYPES = {\n        '1': 'radiochecked',\n        '2': 'letterbyletter',\n        '3': 'freetext'\n    };\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} questionid The questionid.\n     * @return {void}\n     */\n    constructor(element, questionid) {\n        this.element = element;\n        this.questionid = parseInt(questionid);\n        this.addEventListeners();\n        this.getDatagrid();\n        this.tempfield = document.querySelector('input[name=\"newquestion\"]');\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const form = document.querySelector('[data-region=\"app\"]');\n        form.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        form.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n            const modulename = e.target.closest('[data-region=\"modulename\"]');\n            if (modulename) {\n                this.changeModule(modulename);\n            }\n            const moduletype = e.target.closest('[data-region=\"moduletype\"]');\n            if (moduletype) {\n                this.changeModule(moduletype);\n            }\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        form.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n                e.preventDefault();\n            }\n            if (e.key === 'Enter') {\n                e.preventDefault();\n            }\n        });\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n        });\n\n        let dragging = null;\n\n        form.addEventListener('dragstart', (e) => {\n            if (e.target.tagName === 'TR') {\n                dragging = e.target;\n                e.target.effectAllowed = 'move';\n            }\n        });\n        form.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('tr');\n            if (target && target !== dragging && target.parentNode.dataset.region === 'rows') {\n                const rect = target.getBoundingClientRect();\n                if (e.clientY - rect.top > rect.height / 2) {\n                    target.parentNode.insertBefore(dragging, target.nextSibling);\n                } else {\n                    target.parentNode.insertBefore(dragging, target);\n                }\n            }\n        });\n        form.addEventListener(\"drop\", (e) => {\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        form.addEventListener('dragend', (e) => {\n            const rowId = dragging.dataset.index;\n            const prevRowId = dragging.previousElementSibling ? dragging.previousElementSibling.dataset.index : 0;\n            const moduleId = dragging.closest('[data-region=\"module\"]').dataset.id;\n            Repository.updateSortOrder(\n                {\n                    type: 'row',\n                    questionid: this.questionid,\n                    moduleid: moduleId,\n                    id: rowId,\n                    previd: prevRowId\n                }\n            );\n            dragging = null;\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n\n        // Listen for the saveconfirm custom event. When run save the table data.\n        document.addEventListener('saveconfirm', () => {\n            this.setTableData();\n        });\n    }\n\n    async getDatagrid() {\n        await this.getTableData();\n        await this.getTableConfig();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        const response = await Repository.getColumns({table: this.table});\n        await State.setValue('columns', response.columns);\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({questionid: this.questionid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.modules.length > 0) {\n                const modules = this.parseModules(response.modules);\n                State.setValue('modules', modules);\n            } else {\n                const moduleid = await this.createModule(' ', 0);\n                await this.createRow(moduleid, 0, 0);\n                this.getTableData();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the modules, add the correct column properties to each cell.\n     * @param {Array} modules The modules.\n     * @return {Array} The parsed rows.\n     */\n    parseModules(modules) {\n        modules.forEach(mod => {\n            const type = this.TYPES[mod.type];\n            mod[type] = true;\n            mod.rows.map(row => {\n                row.cells = row.cells.map(cell => {\n                    const column = mod.columns.find(column => column.column == cell.column);\n                    // Clone the column properties to the cell but keep the cell properties.\n                    cell = Object.assign({}, cell, column);\n                    if (cell.type === 'select') {\n                        // Clone the options array to avoid shared references\n                        cell.options = cell.options.map(option => {\n                            const clonedOption = Object.assign({}, option);\n                            if (clonedOption.name == cell.value) {\n                                clonedOption.selected = true;\n                            }\n                            return clonedOption;\n                        });\n                    }\n                    cell.edit = true;\n                    return cell;\n                });\n                return row;\n            });\n        });\n        return modules;\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n            },\n        };\n    }\n\n    /**\n     * Check the cell value. It can not exceed the cell length.\n     * @param {object} cell The cell.\n     * @return {void}\n     */\n    checkCellValue(cell) {\n        if (cell.value === null) {\n            return;\n        }\n        if (cell.type === 'text' && cell.value.length > cell.length) {\n            cell.value = cell.value.substring(0, cell.length);\n        }\n    }\n\n\n    /**\n     * Clean the Modules array.\n     * @param {Array} modules The modules.\n     * @return {Array} The cleaned modules.\n     */\n    cleanModules(modules) {\n        const cleanedModules = [];\n        modules.forEach(module => {\n            const rows = module.rows;\n            const rowObject = this.getRowObject();\n            const cleanedRows = rows.map(row => {\n                const cleanedRow = {};\n                Object.keys(rowObject.rows).forEach(key => {\n                    cleanedRow[key] = row[key];\n                });\n                // Clean the cells.\n                cleanedRow.cells = row.cells.map(cell => {\n                    const cleanedCell = {};\n                    this.checkCellValue(cell);\n                    Object.keys(rowObject.rows.cells).forEach(key => {\n                        cleanedCell[key] = cell[key];\n                    });\n                    return cleanedCell;\n                });\n                return cleanedRow;\n            });\n            const cleanedModule = {};\n            cleanedModule.id = module.moduleid;\n            cleanedModule.sortorder = module.modulesortorder;\n            cleanedModule.name = module.modulename;\n            cleanedModule.type = module.type;\n            cleanedModule.numoptions = module.numoptions;\n            cleanedModule.rows = cleanedRows;\n            cleanedModules.push(cleanedModule);\n        });\n        return cleanedModules;\n    }\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            const saveConfirmButton = document.querySelector('[data-action=\"saveconfirm\"]');\n            saveConfirmButton.classList.add('saving');\n            const modules = State.getValue('modules');\n            const cleanedModules = this.cleanModules(modules);\n            if (this.questionid == 0) {\n                this.tempfield.value = JSON.stringify(cleanedModules);\n            }\n            const response = await Repository.setData({questionid: this.questionid, modules: cleanedModules});\n            if (!response) {\n                Notification.exception('No response from the server');\n            }\n            setTimeout(() => {\n                saveConfirmButton.classList.remove('saving');\n            }, 200);\n        }, 600);\n        set();\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'addrow') {\n            this.addRow(btn);\n        }\n        if (btn.dataset.action === 'deleterow') {\n            this.deleteRow(btn);\n        }\n        if (btn.dataset.action === 'addmodule') {\n            this.addModule(btn);\n        }\n        if (btn.dataset.action === 'deletemodule') {\n            this.deleteModule(btn);\n        }\n        if (btn.dataset.action === 'saveconfirm') {\n            this.setTableData();\n        }\n        if (btn.dataset.action === 'moduleremoveoption') {\n            this.updateModuleOption(btn, false);\n        }\n        if (btn.dataset.action === 'moduleaddoption') {\n            this.updateModuleOption(btn, true);\n        }\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async addRow(btn) {\n        const modules = State.getValue('modules');\n\n        let rowid = btn.dataset.id;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const rows = module.rows;\n        // When called from the link under the table, the rowid is not set.\n        if (rowid == -1) {\n            rowid = rows[rows.length - 1].id;\n        }\n\n        const row = await this.createRow(moduleid, rowid);\n        if (!row) {\n            return;\n        }\n        // Inject the row after the clicked row.\n        rows.splice(rows.indexOf(rows.find(r => r.id == rowid)) + 1, 0, row);\n        State.setValue('modules', modules);\n        this.resetRowSortorder();\n    }\n\n    /**\n     * Create a new row.\n     *\n     * @param {Number} moduleid The moduleid.\n     * @param {Number} prevrowid The previous rowid.\n     * @return {Promise} The promise.\n     */\n    async createRow(moduleid, prevrowid) {\n        let rowid = this.temprowid++;\n        if (this.questionid != 0) {\n            rowid = await Repository.createRow({questionid: this.questionid, moduleid: moduleid, prevrowid: prevrowid});\n        }\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async deleteRow(btn) {\n        const modules = State.getValue('modules');\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        if (this.questionid == 0) {\n            const index = module.rows.findIndex(r => r.id == rowid);\n            module.rows.splice(index, 1);\n            this.resetRowSortorder();\n            State.setValue('modules', modules);\n            return new Promise((resolve) => {\n                resolve(rowid);\n            });\n        }\n        const response = await Repository.deleteRow({questionid: this.questionid, rowid: rowid});\n        return new Promise((resolve) => {\n            if (response) {\n                const rows = module.rows;\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('modules', modules);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            // Find the correct cell in the row.\n            const rowIndex = module.rows.findIndex(r => r.id == index);\n            if (rowIndex === -1) {\n                return;\n            }\n            const cellIndex = module.rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n            module.rows[rowIndex].cells[cellIndex].value = value;\n            if (module.rows[rowIndex].cells[cellIndex].type === 'select') {\n                module.rows[rowIndex].cells[cellIndex].options.forEach(option => {\n                    option.selected = option.name === value;\n                });\n            }\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Change the module name.\n     * @param {object} element The element that was changed.\n     * @return {void}\n     */\n    changeModule(element) {\n        const moduleElement = element.closest('[data-region=\"module\"]');\n        const moduleid = moduleElement.dataset.id;\n        const name = moduleElement.querySelector('[data-region=\"modulename\"]').value;\n        const type = moduleElement.querySelector('[data-region=\"moduletype\"]').value;\n        const numoptions = moduleElement.querySelector('[data-region=\"numoptions\"]').value;\n        Object.values(this.TYPES).forEach(type => {\n            moduleElement.classList.remove(type);\n        });\n        moduleElement.classList.add(this.TYPES[type]);\n        const modules = State.getValue('modules');\n        modules.forEach(moduleObject => {\n            if (moduleObject.moduleid == moduleid) {\n                moduleObject.modulename = name;\n                moduleObject.type = parseInt(type);\n                moduleObject.numoptions = parseInt(numoptions);\n            }\n        });\n        this.updateRangeIndicator(moduleElement);\n        this.setTableData();\n    }\n\n    /**\n     * Update the module option. Update the value of the numoptions field.\n     * @param {object} btn The button that was clicked.\n     * @param {Boolean} add Add or remove an option.\n     * @return {void}\n     */\n    updateModuleOption(btn, add) {\n        const module = btn.closest('[data-region=\"module\"]');\n        const numoptions = module.querySelector('[data-region=\"numoptions\"]');\n        const value = parseInt(numoptions.value);\n        if (add) {\n            numoptions.value = value + 1;\n        } else {\n            numoptions.value = value - 1;\n        }\n        this.changeModule(numoptions);\n    }\n\n    /**\n     * Update the range indicator.\n     * @param {HTMLElement} moduleElement The module.\n     */\n    async updateRangeIndicator(moduleElement) {\n        const type = moduleElement.querySelector('[data-region=\"moduletype\"]').value;\n        const numoptions = moduleElement.querySelector('[data-region=\"numoptions\"]').value;\n        const indicator = moduleElement.querySelector('[data-region=\"indicator\"]');\n        const stringname = 'indicator:' + this.TYPES[type];\n        // Get the x-th letter of the alphabet.\n        const stringtemplate = {\n            'options': numoptions,\n            'lastletter': String.fromCharCode(65 + parseInt(numoptions) - 1),\n        };\n        indicator.textContent = await getString(stringname, 'qtype_answersheet', stringtemplate);\n    }\n\n    /**\n     * Delete a module.\n     * @param {object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     * @return {void}\n     */\n    async deleteModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteModule({questionid: this.questionid, moduleid: moduleid});\n        return new Promise((resolve) => {\n            if (response) {\n                const index = modules.indexOf(module);\n                modules.splice(index, 1);\n                State.setValue('modules', modules);\n            }\n            resolve(moduleid);\n        });\n    }\n\n    /**\n     * Create a new module.\n     * @param {String} name The name.\n     * @param {Number} index The index.\n     * @param {Number} type The type.\n     * @param {Number} numoptions The number of options.\n     * @return {Promise} The promise.\n     */\n    async createModule(name, index, type = 1, numoptions = 4) {\n        const id = await Repository.createModule(\n            {\n                name: name,\n                questionid: this.questionid,\n                sortorder: index,\n                type: type,\n                numoptions: numoptions\n            });\n        return new Promise((resolve) => {\n            resolve(id);\n        });\n    }\n\n    /**\n     * Add a new module.\n     * @return {void}\n     */\n    async addModule() {\n        const modules = State.getValue('modules');\n        const index = modules.length;\n        const numoptions = 4;\n        let moduleid = modules.length + 1;\n        if (this.questionid != 0) {\n            moduleid = await this.createModule(' ', index, 1, numoptions);\n        }\n        const row = await this.createRow(moduleid, 0);\n\n        const module = {\n            moduleid: moduleid,\n            modulesortorder: index + 1,\n            modulename: ' ',\n            type: 1,\n            numoptions: numoptions,\n            indicator: 'A - ' + String.fromCharCode(65 + numoptions - 1),\n            rows: [row],\n        };\n        module[this.TYPES['1']] = true;\n        modules.push(module);\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Get the row from the state.\n     * @param {int} rowid The rowid.\n     */\n    getRow(rowid) {\n        const modules = State.getValue('modules');\n        // Combine all rows in one array.\n        const rows = modules.reduce((acc, module) => {\n            return acc.concat(module.rows);\n        }, []);\n        const row = rows.find(r => r.id == rowid);\n        return row;\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            module.rows.forEach((row, index) => {\n                row.sortorder = index;\n            });\n        });\n        State.setValue('modules', modules);\n    }\n\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} questionid The questionid.\n */\nconst init = (element, questionid) => {\n    new Manager(element, questionid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","element","questionid","parseInt","addEventListeners","getDatagrid","tempfield","document","querySelector","form","addEventListener","e","btn","target","closest","preventDefault","actions","input","change","modulename","changeModule","moduletype","key","navigate","dragging","tagName","effectAllowed","parentNode","dataset","region","rect","getBoundingClientRect","clientY","top","height","insertBefore","nextSibling","rowId","index","prevRowId","previousElementSibling","moduleId","id","updateSortOrder","type","this","moduleid","previd","setTableData","getTableData","getTableConfig","response","Repository","getColumns","table","State","setValue","columns","getData","modules","length","parseModules","createModule","createRow","error","exception","forEach","mod","TYPES","rows","map","row","cells","cell","column","find","Object","assign","options","option","clonedOption","name","value","selected","edit","getRowObject","checkCellValue","substring","cleanModules","cleanedModules","module","rowObject","cleanedRows","cleanedRow","keys","cleanedCell","cleanedModule","sortorder","modulesortorder","numoptions","push","async","saveConfirmButton","classList","add","getValue","JSON","stringify","setData","setTimeout","remove","set","action","addRow","deleteRow","addModule","deleteModule","updateModuleOption","rowid","m","splice","indexOf","r","resetRowSortorder","prevrowid","temprowid","Promise","resolve","undefined","structuredClone","findIndex","Array","from","children","columnid","rowIndex","cellIndex","c","moduleElement","values","moduleObject","updateRangeIndicator","indicator","stringname","stringtemplate","String","fromCharCode","textContent","getRow","reduce","acc","concat","currentIndex","currentColumn","allRows","querySelectorAll","i","nextInput","focus","previousInput","nextColumn","nextElementSibling","previousColumn","init"],"mappings":"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"}